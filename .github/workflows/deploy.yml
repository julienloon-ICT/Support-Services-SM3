name: Build, Deploy and Switch Blue-Green

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push Docker image
      run: |
        docker build -t julienloonict/ss-bg:latest ./Website
        docker push julienloonict/ss-bg:latest

  deploy-to-test:
    runs-on: tstserver
    needs: build-and-push
    steps:
    - name: Pull nieuwe image op SR-TST-01
      run: |
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker pull julienloonict/ss-bg:latest
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker stop test-website || true
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker rm test-website || true
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker run -d --name test-website -p 80:80 julienloonict/ss-bg:latest

    - name: Verify test environment and display active site
      run: |
        sleep 5
        RESPONSE=$(curl -s http://localhost:80)
        if echo "$RESPONSE" | grep -q "Green Environment"; then
          echo "Test environment deployed successfully: Green Environment."
        elif echo "$RESPONSE" | grep -q "Blue Environment"; then
          echo "Test environment deployed successfully: Blue Environment."
        else
          echo "Test environment deployment failed."
          exit 1
        fi

  approval-step:
    runs-on: ubuntu-latest
    needs: deploy-to-test
    steps:
    - name: Await manual approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: julienloon-ICT

  deploy-to-production:
    runs-on: haproxy
    needs: approval-step
    steps:
    - name: Determine next backend
      id: next-backend
      run: |
        CURRENT_BACKEND=$(sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.HAPROXY_HOST }} \
          "cat /home/srvadmin/haproxy_backend_status.txt 2>/dev/null || echo 'backend_blue'")
        if [ "$CURRENT_BACKEND" = "backend_blue" ]; then
          echo "NEXT_BACKEND=backend_green" >> $GITHUB_ENV
          echo "TARGET_SERVER=192.168.1.17" >> $GITHUB_ENV
        else
          echo "NEXT_BACKEND=backend_blue" >> $GITHUB_ENV
          echo "TARGET_SERVER=192.168.1.16" >> $GITHUB_ENV
        fi

    - name: Pull nieuwe image op andere server
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@$TARGET_SERVER \
        "docker pull julienloonict/ss-bg:latest && \
         docker stop website || true && \
         docker rm website || true && \
         docker run -d --name website -p 80:80 julienloonict/ss-bg:latest"

    - name: Switch HAProxy backend
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.HAPROXY_HOST }} \
        "echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S bash /home/srvadmin/switch-blue-green-haproxy.sh ${{ env.NEXT_BACKEND }} && \
         echo '${{ env.NEXT_BACKEND }}' > /home/srvadmin/haproxy_backend_status.txt"

    - name: Verify active backend in HAProxy
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.HAPROXY_HOST }} \
        "grep 'default_backend' /etc/haproxy/haproxy.cfg | grep ${{ env.NEXT_BACKEND }} \
        && echo 'HAProxy switched to ${{ env.NEXT_BACKEND }}.' \
        || (echo 'HAProxy switch failed.' && exit 1)"
        